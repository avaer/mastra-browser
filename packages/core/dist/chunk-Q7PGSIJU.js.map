{"version":3,"sources":["../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/node_modules/.pnpm/tsup@8.3.0_@microsoft+api-extractor@7.47.7_@types+node@20.16.11__postcss@8.4.47_tsx@4.19.1_typescript@5.6.3/node_modules/tsup/assets/esm_shims.js","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/utils.js","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/constants.js","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/types.js","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/tar.js","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/lib/untar.js","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/node_modules/.pnpm/tinytar@0.1.0/node_modules/tinytar/index.js","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/@electric-sql/pglite/src/fs/base.ts","../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/@electric-sql/pglite/src/fs/tarUtils.ts"],"names":["init_esm_shims","__esmMin","require_utils","__commonJSMin","exports","module","MAX_SAFE_INTEGER","undefined","isUndefined","value","isString","isDateTime","isObject","isFunction","isLength","isArray","isArrayLike","isArrayBuffer","map","array","iteratee","find","result","item","index","found","extend","target","toUint8Array","i","length","require_constants","NULL_CHAR","require_types","utils","constants","x","recordSize","defaultFileMode","defaultUid","defaultGid","posixHeader","file","field","formatTarString","buffer","offset","parseTarString","mode","formatTarNumber","parseTarNumber","formatTarDateTime","parseTarDateTime","fixUstarMagic","effectiveHeaderSize","header","last","chars","defaultValue","bytes","returnUnprocessed","calculateChecksum","skipChecksum","from","to","skipFrom","skipTo","whitespace","byte","require_tar","types","L","headerSize","dataSize","allocateBuffer","files","totalSize","writeHeader","currentOffset","checksum","writeData","tar","require_untar","defaultOptions","excludeFields","messages","size","isEndOfFile","readHeader","options","error","readData","createFile","data","name","untar","require_tinytar","import_tinytar","dumpTar","FS","pgDataDir","dbname","compression","tarball","createTarball","compressed","zipped","maybeZip","filename","type","compressedMimeTypes","loadTar","unzip","g","e","filePath","dirPath","dir","dateToUnixTimestamp","readDirectory","path","traverseDirectory","currentPath","entry","fullPath","stats","directoryPath","zipBrowser","zipNode","cs","writer","reader","chunks","done","acc","chunk","promisify","gzip","unzipBrowser","unzipNode","ds","decompressed","gunzip","date","WASM_PREFIX","PGDATA","EmscriptenBuiltinFilesystem","dataDir","pg","emscriptenOptions","_relaxedDurability","BaseFilesystem","_a","debug","mod","EMFS","createEmscriptenFS","ERRNO_CODES","Module","baseFS","log","f","_mount","_populate","_done","parent","_dev","node","parts","attr","dev","oldNode","newDir","newName","oldPath","newPath","stream","position","whence","stat","prot","flags","ptr","mmapFlags"],"mappings":"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","file":"chunk-Q7PGSIJU.js","sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","'use strict';\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\nvar undefined = (function(undefined) {\n  return undefined;\n})();\n\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nfunction isString(value) {\n  return (typeof value == 'string') ||\n    (Object.prototype.toString.call(value) == '[object String]');\n}\n\nfunction isDateTime(value) {\n  return (Object.prototype.toString.call(value) == '[object Date]');\n}\n\nfunction isObject(value) {\n  return (value !== null) && (typeof value == 'object');\n}\n\nfunction isFunction(value) {\n  return typeof value == 'function';\n}\n\nfunction isLength(value) {\n  return (typeof value == 'number') &&\n    (value > -1) && (value % 1 == 0) &&\n    (value <= MAX_SAFE_INTEGER);\n}\n\nfunction isArray(value) {\n  return Object.prototype.toString.call(value) == '[object Array]';\n}\n\nfunction isArrayLike(value) {\n  return isObject(value) && !isFunction(value) && isLength(value.length);\n}\n\nfunction isArrayBuffer(value) {\n  return Object.prototype.toString.call(value) == '[object ArrayBuffer]';\n}\n\nfunction map(array, iteratee) {\n  return Array.prototype.map.call(array, iteratee);\n}\n\nfunction find(array, iteratee) {\n  var result = undefined;\n\n  if (isFunction(iteratee)) {\n    Array.prototype.every.call(array, function(item, index, array) {\n      var found = iteratee(item, index, array);\n      if (found) {\n        result = item;\n      }\n      return !found;  // continue if not found\n    });\n  }\n\n  return result;\n}\n\nfunction extend(target /* ...sources */) {\n  return Object.assign.apply(null, arguments);\n}\n\nfunction toUint8Array(value) {\n  var i;\n  var length;\n  var result;\n\n  if (isString(value)) {\n    length = value.length;\n    result = new Uint8Array(length);\n    for (i = 0; i < length; i++) {\n      result[i] = value.charCodeAt(i) & 0xFF;\n    }\n    return result;\n  }\n\n  if (isArrayBuffer(value)) {\n    return new Uint8Array(value);\n  }\n\n  if (isObject(value) && isArrayBuffer(value.buffer)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  if (isArrayLike(value)) {\n    return new Uint8Array(value);\n  }\n\n  if (isObject(value) && isFunction(value.toString)) {\n    return toUint8Array(value.toString());\n  }\n\n  return new Uint8Array();\n}\n\nmodule.exports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\n\nmodule.exports.isUndefined = isUndefined;\nmodule.exports.isString = isString;\nmodule.exports.isObject = isObject;\nmodule.exports.isDateTime = isDateTime;\nmodule.exports.isFunction = isFunction;\nmodule.exports.isArray = isArray;\nmodule.exports.isArrayLike = isArrayLike;\nmodule.exports.isArrayBuffer = isArrayBuffer;\nmodule.exports.map = map;\nmodule.exports.find = find;\nmodule.exports.extend = extend;\nmodule.exports.toUint8Array = toUint8Array;\n","'use strict';\n\nvar NULL_CHAR = '\\u0000';\n\nmodule.exports = {\n  /* eslint-disable key-spacing */\n\n  NULL_CHAR: NULL_CHAR,\n\n  TMAGIC: 'ustar' + NULL_CHAR + '00',   // 'ustar', NULL, '00'\n  OLDGNU_MAGIC: 'ustar  ' + NULL_CHAR,  // 'ustar  ', NULL\n\n  // Values used in typeflag field.\n  REGTYPE:  0,  // regular file\n  LNKTYPE:  1,  // link\n  SYMTYPE:  2,  // reserved\n  CHRTYPE:  3,  // character special\n  BLKTYPE:  4,  // block special\n  DIRTYPE:  5,  // directory\n  FIFOTYPE: 6,  // FIFO special\n  CONTTYPE: 7,  // reserved\n\n  // Bits used in the mode field, values in octal.\n  TSUID: parseInt('4000', 8),  // set UID on execution\n  TSGID: parseInt('2000', 8),  // set GID on execution\n  TSVTX: parseInt('1000', 8),  // reserved\n\n  // file permissions\n  TUREAD:  parseInt('0400', 8),  // read by owner\n  TUWRITE: parseInt('0200', 8),  // write by owner\n  TUEXEC:  parseInt('0100', 8),  // execute/search by owner\n  TGREAD:  parseInt('0040', 8),  // read by group\n  TGWRITE: parseInt('0020', 8),  // write by group\n  TGEXEC:  parseInt('0010', 8),  // execute/search by group\n  TOREAD:  parseInt('0004', 8),  // read by other\n  TOWRITE: parseInt('0002', 8),  // write by other\n  TOEXEC:  parseInt('0001', 8),   // execute/search by other\n\n  TPERMALL:  parseInt('0777', 8),   // rwxrwxrwx\n  TPERMMASK: parseInt('0777', 8)    // permissions bitmask\n\n  /* eslint-enable key-spacing */\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar constants = require('./constants');\n\nvar recordSize = 512;\nvar defaultFileMode = constants.TPERMALL;  // rwxrwxrwx\nvar defaultUid = 0;  // root\nvar defaultGid = 0;  // root\n\n/*\n struct posix_header {           // byte offset\n char name[100];               //   0\n char mode[8];                 // 100\n char uid[8];                  // 108\n char gid[8];                  // 116\n char size[12];                // 124\n char mtime[12];               // 136\n char chksum[8];               // 148\n char typeflag;                // 156\n char linkname[100];           // 157\n char magic[6];                // 257\n char version[2];              // 263\n char uname[32];               // 265\n char gname[32];               // 297\n char devmajor[8];             // 329\n char devminor[8];             // 337\n char prefix[131];             // 345\n char atime[12];               // 476\n char ctime[12];               // 488\n };\n */\n\nvar posixHeader = [\n  // <field name>, <size>, <offset>, <used>, <format>, <parse>, [ <check> ]\n  ['name', 100, 0, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['mode', 8, 100, function(file, field) {\n    var mode = file[field[0]] || defaultFileMode;\n    mode = mode & constants.TPERMMASK;\n    return formatTarNumber(mode, field[1], defaultFileMode);\n  }, function(buffer, offset, field) {\n    var result = parseTarNumber(buffer.slice(offset, offset + field[1]));\n    result &= constants.TPERMMASK;\n    return result;\n  }],\n  ['uid', 8, 108, function(file, field) {\n    return formatTarNumber(file[field[0]], field[1], defaultUid);\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['gid', 8, 116, function(file, field) {\n    return formatTarNumber(file[field[0]], field[1], defaultGid);\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['size', 12, 124, function(file, field) {\n    return formatTarNumber(file.data.length, field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['modifyTime', 12, 136, function(file, field) {\n    return formatTarDateTime(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarDateTime(buffer.slice(offset, offset + field[1]));\n  }],\n  ['checksum', 8, 148, function(file, field) {\n    return '        ';  // placeholder\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['type', 1, 156, function(file, field) {\n    // get last octal digit; 0 - regular file\n    return '' + ((parseInt(file[field[0]], 10) || 0) % 8);\n  }, function(buffer, offset, field) {\n    return (parseInt(String.fromCharCode(buffer[offset]), 10) || 0) % 8;\n  }],\n  ['linkName', 100, 157, function(file, field) {\n    return '';  // only regular files are supported\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['ustar', 8, 257, function(file, field) {\n    return constants.TMAGIC;  // magic + version\n  }, function(buffer, offset, field) {\n    return fixUstarMagic(\n      parseTarString(buffer.slice(offset, offset + field[1]), true)\n    );\n  }, function(file, field) {\n    return (file[field[0]] == constants.TMAGIC) ||\n      (file[field[0]] == constants.OLDGNU_MAGIC);\n  }],\n  ['owner', 32, 265, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['group', 32, 297, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['majorNumber', 8, 329, function(file, field) {\n    return '';  // only regular files are supported\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['minorNumber', 8, 337, function(file, field) {\n    return '';  // only regular files are supported\n  }, function(buffer, offset, field) {\n    return parseTarNumber(buffer.slice(offset, offset + field[1]));\n  }],\n  ['prefix', 131, 345, function(file, field) {\n    return formatTarString(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarString(buffer.slice(offset, offset + field[1]));\n  }],\n  ['accessTime', 12, 476, function(file, field) {\n    return formatTarDateTime(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarDateTime(buffer.slice(offset, offset + field[1]));\n  }],\n  ['createTime', 12, 488, function(file, field) {\n    return formatTarDateTime(file[field[0]], field[1]);\n  }, function(buffer, offset, field) {\n    return parseTarDateTime(buffer.slice(offset, offset + field[1]));\n  }]\n];\n\nvar effectiveHeaderSize = (function(header) {\n  var last = header[header.length - 1];\n  return last[2] + last[1];  // offset + size\n})(posixHeader);\n\nfunction fixUstarMagic(value) {\n  if (value.length == 8) {\n    var chars = value.split('');\n\n    if (chars[5] == constants.NULL_CHAR) {\n      // TMAGIC ?\n      if ((chars[6] == ' ') || (chars[6] == constants.NULL_CHAR)) {\n        chars[6] = '0';\n      }\n      if ((chars[7] == ' ') || (chars[7] == constants.NULL_CHAR)) {\n        chars[7] = '0';\n      }\n      chars = chars.join('');\n      return chars == constants.TMAGIC ? chars : value;\n    } else if (chars[7] == constants.NULL_CHAR) {\n      // OLDGNU_MAGIC ?\n      if (chars[5] == constants.NULL_CHAR) {\n        chars[5] = ' ';\n      }\n      if (chars[6] == constants.NULL_CHAR) {\n        chars[6] = ' ';\n      }\n      return chars == constants.OLDGNU_MAGIC ? chars : value;\n    }\n  }\n  return value;\n}\n\nfunction formatTarString(value, length) {\n  length -= 1;  // preserve space for trailing null-char\n  if (utils.isUndefined(value)) {\n    value = '';\n  }\n  value = ('' + value).substr(0, length);\n  return value + constants.NULL_CHAR;\n}\n\nfunction formatTarNumber(value, length, defaultValue) {\n  defaultValue = parseInt(defaultValue) || 0;\n  length -= 1;  // preserve space for trailing null-char\n  value = (parseInt(value) || defaultValue)\n    .toString(8).substr(-length, length);\n  while (value.length < length) {\n    value = '0' + value;\n  }\n  return value + constants.NULL_CHAR;\n}\n\nfunction formatTarDateTime(value, length) {\n  if (utils.isDateTime(value)) {\n    value = Math.floor(1 * value / 1000);\n  } else {\n    value = parseInt(value, 10);\n    if (isFinite(value)) {\n      if (value <= 0) {\n        return '';\n      }\n    } else {\n      value = Math.floor(1 * new Date() / 1000);\n    }\n  }\n  return formatTarNumber(value, length, 0);\n}\n\nfunction parseTarString(bytes, returnUnprocessed) {\n  var result = String.fromCharCode.apply(null, bytes);\n  if (returnUnprocessed) {\n    return result;\n  }\n  var index = result.indexOf(constants.NULL_CHAR);\n  return index >= 0 ? result.substr(0, index) : result;\n}\n\nfunction parseTarNumber(bytes) {\n  var result = String.fromCharCode.apply(null, bytes);\n  return parseInt(result.replace(/^0+$/g, ''), 8) || 0;\n}\n\nfunction parseTarDateTime(bytes) {\n  if ((bytes.length == 0) || (bytes[0] == 0)) {\n    return null;\n  }\n  return new Date(1000 * parseTarNumber(bytes));\n}\n\nfunction calculateChecksum(buffer, offset, skipChecksum) {\n  var from = parseInt(offset, 10) || 0;\n  var to = Math.min(from + effectiveHeaderSize, buffer.length);\n  var result = 0;\n\n  // When calculating checksum, `checksum` field should be\n  // threat as filled with space char (byte 32)\n  var skipFrom = 0;\n  var skipTo = 0;\n  if (skipChecksum) {\n    posixHeader.every(function(field) {\n      if (field[0] == 'checksum') {\n        skipFrom = from + field[2];\n        skipTo = skipFrom + field[1];\n        return false;\n      }\n      return true;\n    });\n  }\n\n  var whitespace = ' '.charCodeAt(0);\n  for (var i = from; i < to; i++) {\n    // 262144 = 8^6 - 6 octal digits - maximum possible value for checksum;\n    // wrap to avoid numeric overflow\n    var byte = (i >= skipFrom) && (i < skipTo) ? whitespace : buffer[i];\n    result = (result + byte) % 262144;\n  }\n  return result;\n}\n\nmodule.exports.recordSize = recordSize;\nmodule.exports.defaultFileMode = defaultFileMode;\nmodule.exports.defaultUid = defaultUid;\nmodule.exports.defaultGid = defaultGid;\nmodule.exports.posixHeader = posixHeader;\nmodule.exports.effectiveHeaderSize = effectiveHeaderSize;\n\nmodule.exports.calculateChecksum = calculateChecksum;\nmodule.exports.formatTarString = formatTarString;\nmodule.exports.formatTarNumber = formatTarNumber;\nmodule.exports.formatTarDateTime = formatTarDateTime;\nmodule.exports.parseTarString = parseTarString;\nmodule.exports.parseTarNumber = parseTarNumber;\nmodule.exports.parseTarDateTime = parseTarDateTime;\n\n","'use strict';\n\nvar constants = require('./constants');\nvar utils = require('./utils');\nvar types = require('./types');\n\nfunction headerSize(file) {\n  // header has fixed size\n  return types.recordSize;\n}\n\nfunction dataSize(file) {\n  // align to record boundary\n  return Math.ceil(file.data.length / types.recordSize) * types.recordSize;\n}\n\nfunction allocateBuffer(files) {\n  var totalSize = 0;\n\n  // Calculate space that will be used by each file\n  files.forEach(function(file) {\n    totalSize += headerSize(file) + dataSize(file);\n  });\n\n  // TAR must end with two empty records\n  totalSize += types.recordSize * 2;\n\n  // Array SHOULD be initialized with zeros:\n  // from TypedArray constructor docs:\n  // > When creating a TypedArray instance (i.e. instance of Int8Array\n  // > or similar), an array buffer is created internally\n  // from ArrayBuffer constructor docs:\n  // > A new ArrayBuffer object of the specified size.\n  // > Its contents are initialized to 0.\n  return new Uint8Array(totalSize);\n}\n\nfunction writeHeader(buffer, file, offset) {\n  offset = parseInt(offset) || 0;\n\n  var currentOffset = offset;\n  types.posixHeader.forEach(function(field) {\n    var value = field[3](file, field);\n    var length = value.length;\n    for (var i = 0; i < length; i += 1) {\n      buffer[currentOffset + i] = value.charCodeAt(i) & 0xFF;\n    }\n    currentOffset += field[1];  // move to the next field\n  });\n\n  var field = utils.find(types.posixHeader, function(field) {\n    return field[0] == 'checksum';\n  });\n\n  if (field) {\n    // Patch checksum field\n    var checksum = types.calculateChecksum(buffer, offset, true);\n    var value = types.formatTarNumber(checksum, field[1] - 2) +\n      constants.NULL_CHAR + ' ';\n    currentOffset = offset + field[2];\n    for (var i = 0; i < value.length; i += 1) {\n      // put bytes\n      buffer[currentOffset] = value.charCodeAt(i) & 0xFF;\n      currentOffset++;\n    }\n  }\n\n  return offset + headerSize(file);\n}\n\nfunction writeData(buffer, file, offset) {\n  offset = parseInt(offset, 10) || 0;\n  buffer.set(file.data, offset);\n  return offset + dataSize(file);\n}\n\nfunction tar(files) {\n  files = utils.map(files, function(file) {\n    return utils.extend({}, file, {\n      data: utils.toUint8Array(file.data)\n    });\n  });\n\n  var buffer = allocateBuffer(files);\n\n  var offset = 0;\n  files.forEach(function(file) {\n    offset = writeHeader(buffer, file, offset);\n    offset = writeData(buffer, file, offset);\n  });\n\n  return buffer;\n}\n\nmodule.exports.tar = tar;\n","'use strict';\n\nvar constants = require('./constants');\nvar utils = require('./utils');\nvar types = require('./types');\n\nvar defaultOptions = {\n  extractData: true,\n  checkHeader: true,\n  checkChecksum: true,\n  checkFileSize: true\n};\n\nvar excludeFields = {\n  size: true,\n  checksum: true,\n  ustar: true\n};\n\nvar messages = {\n  unexpectedEndOfFile: 'Unexpected end of file.',\n  fileCorrupted: 'File is corrupted.',\n  checksumCheckFailed: 'Checksum check failed.'\n};\n\nfunction headerSize(header) {\n  // header has fixed size\n  return types.recordSize;\n}\n\nfunction dataSize(size) {\n  // align to record boundary\n  return Math.ceil(size / types.recordSize) * types.recordSize;\n}\n\nfunction isEndOfFile(buffer, offset) {\n  var from = offset;\n  var to = Math.min(buffer.length, offset + types.recordSize * 2);\n  for (var i = from; i < to; i++) {\n    if (buffer[i] != 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction readHeader(buffer, offset, options) {\n  if (buffer.length - offset < types.recordSize) {\n    if (options.checkFileSize) {\n      throw new Error(messages.unexpectedEndOfFile);\n    }\n    return null;\n  }\n\n  offset = parseInt(offset) || 0;\n\n  var result = {};\n  var currentOffset = offset;\n  types.posixHeader.forEach(function(field) {\n    result[field[0]] = field[4](buffer, currentOffset, field);\n    currentOffset += field[1];\n  });\n\n  if (result.type != 0) {  // only regular files can have data\n    result.size = 0;\n  }\n\n  if (options.checkHeader) {\n    types.posixHeader.forEach(function(field) {\n      if (utils.isFunction(field[5]) && !field[5](result, field)) {\n        var error = new Error(messages.fileCorrupted);\n        error.data = {\n          offset: offset + field[2],\n          field: field[0]\n        };\n        throw error;\n      }\n    });\n  }\n\n  if (options.checkChecksum) {\n    var checksum = types.calculateChecksum(buffer, offset, true);\n    if (checksum != result.checksum) {\n      var error = new Error(messages.checksumCheckFailed);\n      error.data = {\n        offset: offset,\n        header: result,\n        checksum: checksum\n      };\n      throw error;\n    }\n  }\n\n  return result;\n}\n\nfunction readData(buffer, offset, header, options) {\n  if (!options.extractData) {\n    return null;\n  }\n\n  if (header.size <= 0) {\n    return new Uint8Array();\n  }\n  return buffer.slice(offset, offset + header.size);\n}\n\nfunction createFile(header, data) {\n  var result = {};\n  types.posixHeader.forEach(function(field) {\n    var name = field[0];\n    if (!excludeFields[name]) {\n      result[name] = header[name];\n    }\n  });\n\n  result.isOldGNUFormat = header.ustar == constants.OLDGNU_MAGIC;\n\n  if (data) {\n    result.data = data;\n  }\n\n  return result;\n}\n\nfunction untar(buffer, options) {\n  options = utils.extend({}, defaultOptions, options);\n\n  var result = [];\n  var offset = 0;\n  var size = buffer.length;\n\n  while (size - offset >= types.recordSize) {\n    buffer = utils.toUint8Array(buffer);\n    var header = readHeader(buffer, offset, options);\n    if (!header) {\n      break;\n    }\n    offset += headerSize(header);\n\n    var data = readData(buffer, offset, header, options);\n    result.push(createFile(header, data));\n    offset += dataSize(header.size);\n\n    if (isEndOfFile(buffer, offset)) {\n      break;\n    }\n  }\n\n  return result;\n}\n\nmodule.exports.untar = untar;\n","'use strict';\n\n// http://www.gnu.org/software/tar/manual/html_node/Standard.html\n\nvar utils = require('./lib/utils');\nvar constants = require('./lib/constants');\nvar tar = require('./lib/tar');\nvar untar = require('./lib/untar');\n\nutils.extend(module.exports, tar, untar, constants);\n","import type { PostgresMod } from '../postgresMod.js'\nimport type { PGlite } from '../pglite.js'\nimport { dumpTar, type DumpTarCompressionOptions } from './tarUtils.js'\n\nexport const WASM_PREFIX = '/tmp/pglite'\nexport const PGDATA = WASM_PREFIX + '/' + 'base'\n\nexport type FsType = 'nodefs' | 'idbfs' | 'memoryfs' | 'opfs-ahp'\n\n/**\n * Filesystem interface.\n * All virtual filesystems that are compatible with PGlite must implement\n * this interface.\n */\nexport interface Filesystem {\n  /**\n   * Initiate the filesystem and return the options to pass to the emscripten module.\n   */\n  init(\n    pg: PGlite,\n    emscriptenOptions: Partial<PostgresMod>,\n  ): Promise<{ emscriptenOpts: Partial<PostgresMod> }>\n\n  /**\n   * Sync the filesystem to any underlying storage.\n   */\n  syncToFs(relaxedDurability?: boolean): Promise<void>\n\n  /**\n   * Sync the filesystem from any underlying storage.\n   */\n  initialSyncFs(): Promise<void>\n\n  /**\n   * Dump the PGDATA dir from the filesystem to a gziped tarball.\n   */\n  dumpTar(\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ): Promise<File | Blob>\n\n  /**\n   * Close the filesystem.\n   */\n  closeFs(): Promise<void>\n}\n\n/**\n * Base class for all emscripten built-in filesystems.\n */\nexport class EmscriptenBuiltinFilesystem implements Filesystem {\n  protected dataDir?: string\n  protected pg?: PGlite\n\n  constructor(dataDir?: string) {\n    this.dataDir = dataDir\n  }\n\n  async init(pg: PGlite, emscriptenOptions: Partial<PostgresMod>) {\n    this.pg = pg\n    return { emscriptenOpts: emscriptenOptions }\n  }\n\n  async syncToFs(_relaxedDurability?: boolean) {}\n\n  async initialSyncFs() {}\n\n  async closeFs() {}\n\n  async dumpTar(dbname: string, compression?: DumpTarCompressionOptions) {\n    return dumpTar(this.pg!.Module.FS, PGDATA, dbname, compression)\n  }\n}\n\n/**\n * Abstract base class for all custom virtual filesystems.\n * Each custom filesystem needs to implement an interface similar to the NodeJS FS API.\n */\nexport abstract class BaseFilesystem implements Filesystem {\n  protected dataDir?: string\n  protected pg?: PGlite\n  readonly debug: boolean\n\n  constructor(dataDir?: string, { debug = false }: { debug?: boolean } = {}) {\n    this.dataDir = dataDir\n    this.debug = debug\n  }\n\n  async syncToFs(_relaxedDurability?: boolean) {}\n\n  async initialSyncFs() {}\n\n  async closeFs() {}\n\n  async dumpTar(dbname: string, compression?: DumpTarCompressionOptions) {\n    return dumpTar(this.pg!.Module.FS, PGDATA, dbname, compression)\n  }\n\n  async init(pg: PGlite, emscriptenOptions: Partial<PostgresMod>) {\n    this.pg = pg\n    const options: Partial<PostgresMod> = {\n      ...emscriptenOptions,\n      preRun: [\n        ...(emscriptenOptions.preRun || []),\n        (mod: PostgresMod) => {\n          const EMFS = createEmscriptenFS(mod, this)\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(EMFS, {}, PGDATA)\n        },\n      ],\n    }\n    return { emscriptenOpts: options }\n  }\n\n  // Filesystem API\n\n  abstract chmod(path: string, mode: number): void\n  abstract close(fd: number): void\n  abstract fstat(fd: number): FsStats\n  abstract lstat(path: string): FsStats\n  abstract mkdir(\n    path: string,\n    options?: { recursive?: boolean; mode?: number },\n  ): void\n  abstract open(path: string, flags?: string, mode?: number): number\n  abstract readdir(path: string): string[]\n  abstract read(\n    fd: number,\n    buffer: Uint8Array, // Buffer to read into\n    offset: number, // Offset in buffer to start writing to\n    length: number, // Number of bytes to read\n    position: number, // Position in file to read from\n  ): number\n  abstract rename(oldPath: string, newPath: string): void\n  abstract rmdir(path: string): void\n  abstract truncate(\n    path: string,\n    len: number, // Length to truncate to - defaults to 0\n  ): void\n  abstract unlink(path: string): void\n  abstract utimes(path: string, atime: number, mtime: number): void\n  abstract writeFile(\n    path: string,\n    data: string | Uint8Array,\n    options?: { encoding?: string; mode?: number; flag?: string },\n  ): void\n  abstract write(\n    fd: number,\n    buffer: Uint8Array, // Buffer to read from\n    offset: number, // Offset in buffer to start reading from\n    length: number, // Number of bytes to write\n    position: number, // Position in file to write to\n  ): number\n}\n\nexport type FsStats = {\n  dev: number\n  ino: number\n  mode: number\n  nlink: number\n  uid: number\n  gid: number\n  rdev: number\n  size: number\n  blksize: number\n  blocks: number\n  atime: number\n  mtime: number\n  ctime: number\n}\n\ntype EmscriptenFileSystem = Emscripten.FileSystemType & {\n  createNode: (\n    parent: FSNode | null,\n    name: string,\n    mode: number,\n    dev?: any,\n  ) => FSNode\n  node_ops: FS.NodeOps\n  stream_ops: FS.StreamOps & {\n    dup: (stream: FSStream) => void\n    mmap: (\n      stream: FSStream,\n      length: number,\n      position: number,\n      prot: any,\n      flags: any,\n    ) => { ptr: number; allocated: boolean }\n    msync: (\n      stream: FSStream,\n      buffer: Uint8Array,\n      offset: number,\n      length: number,\n      mmapFlags: any,\n    ) => number\n  }\n} & { [key: string]: any }\n\ntype FSNode = FS.FSNode & {\n  node_ops: FS.NodeOps\n  stream_ops: FS.StreamOps\n}\n\ntype FSStream = FS.FSStream & {\n  node: FSNode\n  shared: {\n    refcount: number\n  }\n}\n\ntype FSMount = FS.Mount & {\n  opts: {\n    root: string\n  }\n}\n\ntype EmscriptenFS = PostgresMod['FS'] & {\n  createNode: (\n    parent: FSNode | null,\n    name: string,\n    mode: number,\n    dev?: any,\n  ) => FSNode\n}\n\nexport const ERRNO_CODES = {\n  EBADF: 8,\n  EBADFD: 127,\n  EEXIST: 20,\n  EINVAL: 28,\n  EISDIR: 31,\n  ENODEV: 43,\n  ENOENT: 44,\n  ENOTDIR: 54,\n  ENOTEMPTY: 55,\n} as const\n\n/**\n * Create an emscripten filesystem that uses the BaseFilesystem.\n * @param Module The emscripten module\n * @param baseFS The BaseFilesystem implementation\n * @returns The emscripten filesystem\n */\nconst createEmscriptenFS = (Module: PostgresMod, baseFS: BaseFilesystem) => {\n  const FS = Module.FS as EmscriptenFS\n  const log = baseFS.debug ? console.log : null\n  const EMFS = {\n    tryFSOperation<T>(f: () => T): T {\n      try {\n        return f()\n      } catch (e: any) {\n        if (!e.code) throw e\n        if (e.code === 'UNKNOWN') throw new FS.ErrnoError(ERRNO_CODES.EINVAL)\n        throw new FS.ErrnoError(e.code)\n      }\n    },\n    mount(_mount: FSMount): FSNode {\n      return EMFS.createNode(null, '/', 16384 | 511, 0)\n    },\n    syncfs(\n      _mount: FS.Mount,\n      _populate: any, // This has the wrong type in @types/emscripten\n      _done: (err?: number | null) => unknown,\n    ): void {\n      // noop\n    },\n    createNode(\n      parent: FSNode | null,\n      name: string,\n      mode: number,\n      _dev?: any,\n    ): FSNode {\n      if (!FS.isDir(mode) && !FS.isFile(mode)) {\n        throw new FS.ErrnoError(28)\n      }\n      const node = FS.createNode(parent, name, mode)\n      node.node_ops = EMFS.node_ops\n      node.stream_ops = EMFS.stream_ops\n      return node\n    },\n    getMode: function (path: string): number {\n      log?.('getMode', path)\n      return EMFS.tryFSOperation(() => {\n        const stats = baseFS.lstat(path)\n        return stats.mode\n      })\n    },\n    realPath: function (node: FSNode): string {\n      const parts: string[] = []\n      while (node.parent !== node) {\n        parts.push(node.name)\n        node = node.parent as FSNode\n      }\n      parts.push((node.mount as FSMount).opts.root)\n      parts.reverse()\n      return parts.join('/')\n    },\n    node_ops: {\n      getattr(node: FSNode): FS.Stats {\n        log?.('getattr', EMFS.realPath(node))\n        const path = EMFS.realPath(node)\n        return EMFS.tryFSOperation(() => {\n          const stats = baseFS.lstat(path)\n          return {\n            ...stats,\n            dev: 0,\n            ino: node.id,\n            nlink: 1,\n            rdev: node.rdev,\n            atime: new Date(stats.atime),\n            mtime: new Date(stats.mtime),\n            ctime: new Date(stats.ctime),\n          }\n        })\n      },\n      setattr(node: FSNode, attr: FS.Stats): void {\n        log?.('setattr', EMFS.realPath(node), attr)\n        const path = EMFS.realPath(node)\n        EMFS.tryFSOperation(() => {\n          if (attr.mode !== undefined) {\n            baseFS.chmod(path, attr.mode)\n          }\n          if (attr.size !== undefined) {\n            baseFS.truncate(path, attr.size)\n          }\n          if (attr.timestamp !== undefined) {\n            baseFS.utimes(path, attr.timestamp, attr.timestamp)\n          }\n          if (attr.size !== undefined) {\n            baseFS.truncate(path, attr.size)\n          }\n        })\n      },\n      lookup(parent: FSNode, name: string): FSNode {\n        log?.('lookup', EMFS.realPath(parent), name)\n        const path = [EMFS.realPath(parent), name].join('/')\n        const mode = EMFS.getMode(path)\n        return EMFS.createNode(parent, name, mode)\n      },\n      mknod(parent: FSNode, name: string, mode: number, dev: unknown): FSNode {\n        log?.('mknod', EMFS.realPath(parent), name, mode, dev)\n        const node = EMFS.createNode(parent, name, mode, dev)\n        // create the backing node for this in the fs root as well\n        const path = EMFS.realPath(node)\n        return EMFS.tryFSOperation(() => {\n          if (FS.isDir(node.mode)) {\n            baseFS.mkdir(path, { mode })\n          } else {\n            baseFS.writeFile(path, '', { mode })\n          }\n          return node\n        })\n      },\n      rename(oldNode: FSNode, newDir: FSNode, newName: string): void {\n        log?.('rename', EMFS.realPath(oldNode), EMFS.realPath(newDir), newName)\n        const oldPath = EMFS.realPath(oldNode)\n        const newPath = [EMFS.realPath(newDir), newName].join('/')\n        EMFS.tryFSOperation(() => {\n          baseFS.rename(oldPath, newPath)\n        })\n        oldNode.name = newName\n      },\n      unlink(parent: FSNode, name: string): void {\n        log?.('unlink', EMFS.realPath(parent), name)\n        const path = [EMFS.realPath(parent), name].join('/')\n        try {\n          baseFS.unlink(path)\n        } catch (e: any) {\n          // no-op\n        }\n      },\n      rmdir(parent: FSNode, name: string): void {\n        log?.('rmdir', EMFS.realPath(parent), name)\n        const path = [EMFS.realPath(parent), name].join('/')\n        return EMFS.tryFSOperation(() => {\n          baseFS.rmdir(path)\n        })\n      },\n      readdir(node: FSNode): string[] {\n        log?.('readdir', EMFS.realPath(node))\n        const path = EMFS.realPath(node)\n        return EMFS.tryFSOperation(() => {\n          return baseFS.readdir(path)\n        })\n      },\n      symlink(parent: FSNode, newName: string, oldPath: string): void {\n        log?.('symlink', EMFS.realPath(parent), newName, oldPath)\n        // This is not supported by EMFS\n        throw new FS.ErrnoError(63)\n      },\n      readlink(node: FSNode): string {\n        log?.('readlink', EMFS.realPath(node))\n        // This is not supported by EMFS\n        throw new FS.ErrnoError(63)\n      },\n    },\n    stream_ops: {\n      open(stream: FSStream): void {\n        log?.('open stream', EMFS.realPath(stream.node))\n        const path = EMFS.realPath(stream.node)\n        return EMFS.tryFSOperation(() => {\n          if (FS.isFile(stream.node.mode)) {\n            stream.shared.refcount = 1\n            stream.nfd = baseFS.open(path)\n          }\n        })\n      },\n      close(stream: FSStream): void {\n        log?.('close stream', EMFS.realPath(stream.node))\n        return EMFS.tryFSOperation(() => {\n          if (\n            FS.isFile(stream.node.mode) &&\n            stream.nfd &&\n            --stream.shared.refcount === 0\n          ) {\n            baseFS.close(stream.nfd)\n          }\n        })\n      },\n      dup(stream: FSStream) {\n        log?.('dup stream', EMFS.realPath(stream.node))\n        stream.shared.refcount++\n      },\n      read(\n        stream: FSStream, // Stream to read from\n        buffer: Uint8Array, // Buffer to read into - Wrong type in @types/emscripten\n        offset: number, // Offset in buffer to start writing to\n        length: number, // Number of bytes to read\n        position: number, // Position in file to read from\n      ): number {\n        log?.(\n          'read stream',\n          EMFS.realPath(stream.node),\n          offset,\n          length,\n          position,\n        )\n        if (length === 0) return 0\n        const ret = EMFS.tryFSOperation(() =>\n          baseFS.read(\n            stream.nfd!,\n            buffer as unknown as Uint8Array,\n            offset,\n            length,\n            position,\n          ),\n        )\n        return ret\n      },\n      write(\n        stream: FSStream, // Stream to write to\n        buffer: Uint8Array, // Buffer to read from - Wrong type in @types/emscripten\n        offset: number, // Offset in buffer to start writing from\n        length: number, // Number of bytes to write\n        position: number, // Position in file to write to\n      ): number {\n        log?.(\n          'write stream',\n          EMFS.realPath(stream.node),\n          offset,\n          length,\n          position,\n        )\n        return EMFS.tryFSOperation(() =>\n          baseFS.write(\n            stream.nfd!,\n            buffer.buffer as unknown as Uint8Array,\n            offset,\n            length,\n            position,\n          ),\n        )\n      },\n      llseek(stream: FSStream, offset: number, whence: number): number {\n        log?.('llseek stream', EMFS.realPath(stream.node), offset, whence)\n        let position = offset\n        if (whence === 1) {\n          position += stream.position\n        } else if (whence === 2) {\n          if (FS.isFile(stream.node.mode)) {\n            EMFS.tryFSOperation(() => {\n              const stat = baseFS.fstat(stream.nfd!)\n              position += stat.size\n            })\n          }\n        }\n        if (position < 0) {\n          throw new FS.ErrnoError(28)\n        }\n        return position\n      },\n      mmap(\n        stream: FSStream,\n        length: number,\n        position: number,\n        prot: any,\n        flags: any,\n      ) {\n        log?.(\n          'mmap stream',\n          EMFS.realPath(stream.node),\n          length,\n          position,\n          prot,\n          flags,\n        )\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENODEV)\n        }\n\n        const ptr = (Module as any).mmapAlloc(length) // TODO: Fix type and check this is exported\n\n        EMFS.stream_ops.read(\n          stream,\n          Module.HEAP8 as unknown as Uint8Array,\n          ptr,\n          length,\n          position,\n        )\n        return { ptr, allocated: true }\n      },\n      msync(\n        stream: FSStream,\n        buffer: Uint8Array,\n        offset: number,\n        length: number,\n        mmapFlags: any,\n      ) {\n        log?.(\n          'msync stream',\n          EMFS.realPath(stream.node),\n          offset,\n          length,\n          mmapFlags,\n        )\n        EMFS.stream_ops.write(stream, buffer, 0, length, offset)\n        return 0\n      },\n    },\n  } satisfies EmscriptenFileSystem\n  return EMFS\n}\n","import { tar, untar, type TarFile, REGTYPE, DIRTYPE } from 'tinytar'\nimport type { FS } from '../postgresMod.js'\n\nexport type DumpTarCompressionOptions = 'none' | 'gzip' | 'auto'\n\nexport async function dumpTar(\n  FS: FS,\n  pgDataDir: string,\n  dbname: string = 'pgdata',\n  compression: DumpTarCompressionOptions = 'auto',\n): Promise<File | Blob> {\n  const tarball = createTarball(FS, pgDataDir)\n  const [compressed, zipped] = await maybeZip(tarball, compression)\n  const filename = dbname + (zipped ? '.tar.gz' : '.tar')\n  const type = zipped ? 'application/x-gzip' : 'application/x-tar'\n  if (typeof File !== 'undefined') {\n    return new File([compressed], filename, {\n      type,\n    })\n  } else {\n    return new Blob([compressed], {\n      type,\n    })\n  }\n}\n\nconst compressedMimeTypes = [\n  'application/x-gtar',\n  'application/x-tar+gzip',\n  'application/x-gzip',\n  'application/gzip',\n]\n\nexport async function loadTar(\n  FS: FS,\n  file: File | Blob,\n  pgDataDir: string,\n): Promise<void> {\n  let tarball = new Uint8Array(await file.arrayBuffer())\n  const filename =\n    typeof File !== 'undefined' && file instanceof File ? file.name : undefined\n  const compressed =\n    compressedMimeTypes.includes(file.type) ||\n    filename?.endsWith('.tgz') ||\n    filename?.endsWith('.tar.gz')\n  if (compressed) {\n    tarball = await unzip(tarball)\n  }\n\n  let files\n  try {\n    files = untar(tarball)\n  } catch (e) {\n    if (e instanceof Error && e.message.includes('File is corrupted')) {\n      // The file may be compressed, but had the wrong mime type, try unzipping it\n      tarball = await unzip(tarball)\n      files = untar(tarball)\n    } else {\n      throw e\n    }\n  }\n\n  for (const file of files) {\n    const filePath = pgDataDir + file.name\n\n    // Ensure the directory structure exists\n    const dirPath = filePath.split('/').slice(0, -1)\n    for (let i = 1; i <= dirPath.length; i++) {\n      const dir = dirPath.slice(0, i).join('/')\n      if (!FS.analyzePath(dir).exists) {\n        FS.mkdir(dir)\n      }\n    }\n\n    // Write the file or directory\n    if (file.type === REGTYPE) {\n      FS.writeFile(filePath, file.data)\n      FS.utime(\n        filePath,\n        dateToUnixTimestamp(file.modifyTime),\n        dateToUnixTimestamp(file.modifyTime),\n      )\n    } else if (file.type === DIRTYPE) {\n      FS.mkdir(filePath)\n    }\n  }\n}\n\nfunction readDirectory(FS: FS, path: string) {\n  const files: TarFile[] = []\n\n  const traverseDirectory = (currentPath: string) => {\n    const entries = FS.readdir(currentPath)\n    entries.forEach((entry) => {\n      if (entry === '.' || entry === '..') {\n        return\n      }\n      const fullPath = currentPath + '/' + entry\n      const stats = FS.stat(fullPath)\n      const data = FS.isFile(stats.mode)\n        ? FS.readFile(fullPath, { encoding: 'binary' })\n        : new Uint8Array(0)\n      files.push({\n        name: fullPath.substring(path.length), // remove the root path\n        mode: stats.mode,\n        size: stats.size,\n        type: FS.isFile(stats.mode) ? REGTYPE : DIRTYPE,\n        modifyTime: stats.mtime,\n        data,\n      })\n      if (FS.isDir(stats.mode)) {\n        traverseDirectory(fullPath)\n      }\n    })\n  }\n\n  traverseDirectory(path)\n  return files\n}\n\nexport function createTarball(FS: FS, directoryPath: string) {\n  const files = readDirectory(FS, directoryPath)\n  const tarball = tar(files)\n  return tarball\n}\n\nexport async function maybeZip(\n  file: Uint8Array,\n  compression: DumpTarCompressionOptions = 'auto',\n): Promise<[Uint8Array, boolean]> {\n  if (compression === 'none') {\n    return [file, false]\n  } else if (typeof CompressionStream !== 'undefined') {\n    return [await zipBrowser(file), true]\n  } else if (\n    typeof process !== 'undefined' &&\n    process.versions &&\n    process.versions.node\n  ) {\n    return [await zipNode(file), true]\n  } else if (compression === 'auto') {\n    return [file, false]\n  } else {\n    throw new Error('Compression not supported in this environment')\n  }\n}\n\nexport async function zipBrowser(file: Uint8Array): Promise<Uint8Array> {\n  const cs = new CompressionStream('gzip')\n  const writer = cs.writable.getWriter()\n  const reader = cs.readable.getReader()\n\n  writer.write(file)\n  writer.close()\n\n  const chunks: Uint8Array[] = []\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) break\n    if (value) chunks.push(value)\n  }\n\n  const compressed = new Uint8Array(\n    chunks.reduce((acc, chunk) => acc + chunk.length, 0),\n  )\n  let offset = 0\n  chunks.forEach((chunk) => {\n    compressed.set(chunk, offset)\n    offset += chunk.length\n  })\n\n  return compressed\n}\n\nexport async function zipNode(file: Uint8Array): Promise<Uint8Array> {\n  const { promisify } = await import('util')\n  const { gzip } = await import('zlib')\n  const gzipPromise = promisify(gzip)\n  return await gzipPromise(file)\n}\n\nexport async function unzip(file: Uint8Array): Promise<Uint8Array> {\n  if (typeof CompressionStream !== 'undefined') {\n    return await unzipBrowser(file)\n  } else if (\n    typeof process !== 'undefined' &&\n    process.versions &&\n    process.versions.node\n  ) {\n    return await unzipNode(file)\n  } else {\n    throw new Error('Unsupported environment for decompression')\n  }\n}\n\nexport async function unzipBrowser(file: Uint8Array): Promise<Uint8Array> {\n  const ds = new DecompressionStream('gzip')\n  const writer = ds.writable.getWriter()\n  const reader = ds.readable.getReader()\n\n  writer.write(file)\n  writer.close()\n\n  const chunks: Uint8Array[] = []\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) break\n    if (value) chunks.push(value)\n  }\n\n  const decompressed = new Uint8Array(\n    chunks.reduce((acc, chunk) => acc + chunk.length, 0),\n  )\n  let offset = 0\n  chunks.forEach((chunk) => {\n    decompressed.set(chunk, offset)\n    offset += chunk.length\n  })\n\n  return decompressed\n}\n\nexport async function unzipNode(file: Uint8Array): Promise<Uint8Array> {\n  const { promisify } = await import('util')\n  const { gunzip } = await import('zlib')\n  const gunzipPromise = promisify(gunzip)\n  return await gunzipPromise(file)\n}\n\nfunction dateToUnixTimestamp(date: Date | number | undefined): number {\n  if (!date) {\n    return Math.floor(Date.now() / 1000)\n  } else {\n    return typeof date === 'number' ? date : Math.floor(date.getTime() / 1000)\n  }\n}\n"]}