{"version":3,"sources":["../src/relevance/cohere/index.ts","../src/relevance/relevance-score-provider.ts","../src/relevance/mastra-agent/index.ts"],"names":[],"mappings":";;;;AAKO,IAAM,sBAAA,GAAN,MAAM,sBAAwD,CAAA;AAAA,EAGnE,WAAA,CAAY,OAAe,MAAiB,EAAA;AAF5C,IAAQ,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,OAAA,CAAA;AAEN,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,YAAa,CAAA;AAAA,MAC7B,KAAO,EAAA,MAAA,IAAU,OAAQ,CAAA,GAAA,CAAI,cAAkB,IAAA;AAAA,KAChD,CAAA;AAED,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AACf,EAEA,MAAM,iBAAkB,CAAA,KAAA,EAAe,IAA+B,EAAA;AACpE,IAAA,MAAM,QAAW,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA;AAAA,MACxC,KAAA;AAAA,MACA,SAAA,EAAW,CAAC,IAAI,CAAA;AAAA,MAChB,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,IAAM,EAAA;AAAA,KACP,CAAA;AAED,IAAO,OAAA,QAAA,CAAS,OAAQ,CAAA,CAAC,CAAE,CAAA,cAAA;AAAA;AAE/B,CAAA;AArBqE,MAAA,CAAA,sBAAA,EAAA,uBAAA,CAAA;AAA9D,IAAM,qBAAN,GAAA;;;ACCA,SAAS,sBAAA,CAAuB,OAAe,IAAsB,EAAA;AAC1E,EAAO,OAAA,CAAA;;AAAA,OAAA,EAEA,KAAK;;AAAA,MAAA,EAEN,IAAI;;AAAA,sBAAA,CAAA;AAGZ;AARgB,MAAA,CAAA,sBAAA,EAAA,wBAAA,CAAA;;;ACAT,IAAM,2BAAA,GAAN,MAAM,2BAA6D,CAAA;AAAA,EAGxE,WAAA,CAAY,MAAc,KAA4B,EAAA;AAFtD,IAAQ,aAAA,CAAA,IAAA,EAAA,OAAA,CAAA;AAGN,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAI,KAAM,CAAA;AAAA,MACrB,IAAA,EAAM,oBAAoB,IAAI,CAAA,CAAA;AAAA,MAC9B,YAAc,EAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAA,CAAA;AAAA,MAUd;AAAA,KACD,CAAA;AAAA;AACH,EAEA,MAAM,iBAAkB,CAAA,KAAA,EAAe,IAA+B,EAAA;AACpE,IAAM,MAAA,MAAA,GAAS,sBAAuB,CAAA,KAAA,EAAO,IAAI,CAAA;AACjD,IAAA,MAAM,QAAW,GAAA,MAAM,IAAK,CAAA,KAAA,CAAM,SAAS,MAAM,CAAA;AACjD,IAAO,OAAA,UAAA,CAAW,SAAS,IAAI,CAAA;AAAA;AAEnC,CAAA;AAzB0E,MAAA,CAAA,2BAAA,EAAA,4BAAA,CAAA;AAAnE,IAAM,0BAAN,GAAA","file":"chunk-AR4WWOVI.js","sourcesContent":["import { CohereClient } from 'cohere-ai';\n\nimport type { RelevanceScoreProvider } from '../relevance-score-provider';\n\n// Cohere implementation\nexport class CohereRelevanceScorer implements RelevanceScoreProvider {\n  private client: any;\n  private model: string;\n  constructor(model: string, apiKey?: string) {\n    this.client = new CohereClient({\n      token: apiKey || process.env.COHERE_API_KEY || '',\n    });\n\n    this.model = model;\n  }\n\n  async getRelevanceScore(query: string, text: string): Promise<number> {\n    const response = await this.client.rerank({\n      query,\n      documents: [text],\n      model: this.model,\n      topN: 1,\n    });\n\n    return response.results[0].relevanceScore;\n  }\n}\n","// Provider interfaces\nexport interface RelevanceScoreProvider {\n  getRelevanceScore(text1: string, text2: string): Promise<number>;\n}\n\n// Helper function used by providers\nexport function createSimilarityPrompt(query: string, text: string): string {\n  return `Rate the semantic similarity between the following the query and the text on a scale from 0 to 1 (decimals allowed), where 1 means exactly the same meaning and 0 means completely different:\n\nQuery: ${query}\n\nText: ${text}\n\nRelevance score (0-1):`;\n}\n","import { Agent } from '../../agent';\nimport type { MastraLanguageModel } from '../../agent';\nimport { createSimilarityPrompt } from '../relevance-score-provider';\nimport type { RelevanceScoreProvider } from '../relevance-score-provider';\n\n// Mastra Agent implementation\nexport class MastraAgentRelevanceScorer implements RelevanceScoreProvider {\n  private agent: Agent;\n\n  constructor(name: string, model: MastraLanguageModel) {\n    this.agent = new Agent({\n      name: `Relevance Scorer ${name}`,\n      instructions: `You are a specialized agent for evaluating the relevance of text to queries.\nYour task is to rate how well a text passage answers a given query.\nOutput only a number between 0 and 1, where:\n1.0 = Perfectly relevant, directly answers the query\n0.0 = Completely irrelevant\nConsider:\n- Direct relevance to the question\n- Completeness of information\n- Quality and specificity\nAlways return just the number, no explanation.`,\n      model,\n    });\n  }\n\n  async getRelevanceScore(query: string, text: string): Promise<number> {\n    const prompt = createSimilarityPrompt(query, text);\n    const response = await this.agent.generate(prompt);\n    return parseFloat(response.text);\n  }\n}\n"]}