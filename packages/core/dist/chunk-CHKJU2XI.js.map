{"version":3,"sources":["../src/bundler/index.ts"],"names":[],"mappings":";;;;;AACA,IAAM,EAAE,QAAS,EAAA,GAAI,EAAG,CAAA,QAAA;AAajB,IAAe,cAAA,GAAf,MAAe,cAAA,SAAsB,UAA+B,CAAA;AAAA,EACzE,WAAY,CAAA,EAAE,IAAM,EAAA,SAAA,GAAY,WAAmE,EAAA;AACjG,IAAM,KAAA,CAAA,EAAE,SAAW,EAAA,IAAA,EAAM,CAAA;AAAA;AAC3B,EAEA,MAAM,WAA4C,GAAA;AAChD,IAAM,MAAA,OAAA,uBAAc,GAAI,EAAA;AAExB,IAAA,KAAA,MAAW,IAAQ,IAAA,MAAM,IAAK,CAAA,WAAA,EAAe,EAAA;AAC3C,MAAA,MAAM,OAAU,GAAA,MAAM,QAAS,CAAA,IAAA,EAAM,OAAO,CAAA;AAC5C,MAAM,MAAA,MAAA,GAAS,MAAM,OAAO,CAAA;AAE5B,MAAO,MAAA,CAAA,OAAA,CAAQ,MAAM,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC/C,QAAQ,OAAA,CAAA,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,OACvB,CAAA;AAAA;AAGH,IAAO,OAAA,OAAA;AAAA;AAQX,CAAA;AAzB2E,MAAA,CAAA,cAAA,EAAA,eAAA,CAAA;AAApE,IAAe,aAAf,GAAA","file":"chunk-CHKJU2XI.js","sourcesContent":["import fs from 'fs';\nconst { readFile } = fs.promises;\nimport { parse } from 'dotenv';\n\nimport { MastraBase } from '../base';\n\nexport interface IBundler {\n  loadEnvVars(): Promise<Map<string, string>>;\n  getEnvFiles(): Promise<string[]>;\n  bundle(entryFile: string, outputDirectory: string): Promise<void>;\n  prepare(outputDirectory: string): Promise<void>;\n  writePackageJson(outputDirectory: string, dependencies: Map<string, string>): Promise<void>;\n}\n\nexport abstract class MastraBundler extends MastraBase implements IBundler {\n  constructor({ name, component = 'BUNDLER' }: { name: string; component?: 'BUNDLER' | 'DEPLOYER' }) {\n    super({ component, name });\n  }\n\n  async loadEnvVars(): Promise<Map<string, string>> {\n    const envVars = new Map();\n\n    for (const file of await this.getEnvFiles()) {\n      const content = await readFile(file, 'utf-8');\n      const config = parse(content);\n\n      Object.entries(config).forEach(([key, value]) => {\n        envVars.set(key, value);\n      });\n    }\n\n    return envVars;\n  }\n\n  abstract prepare(outputDirectory: string): Promise<void>;\n  abstract writePackageJson(outputDirectory: string, dependencies: Map<string, string>): Promise<void>;\n  abstract writeInstrumentationFile(outputDirectory: string): Promise<void>;\n  abstract getEnvFiles(): Promise<string[]>;\n  abstract bundle(entryFile: string, outputDirectory: string): Promise<void>;\n}\n"]}