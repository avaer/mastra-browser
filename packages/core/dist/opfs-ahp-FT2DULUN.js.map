{"version":3,"sources":["../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/@electric-sql/pglite/src/fs/opfs-ahp.ts"],"names":["init_esm_shims","STATE_FILE","DATA_DIR","INITIAL_MODE","_opfsRootAh","_rootAh","_dataDirAh","_stateFH","_stateSH","_fh","_sh","_handleIdCounter","_openHandlePaths","_openHandleIds","_unsyncedSH","_OpfsAhpFS_instances","init_fn","tryWithWAL_fn","logWAL_fn","pathParts_fn","resolvePath_fn","getPathFromFd_fn","nextHandleId_fn","resolveOpfsDirectory_fn","OpfsAhpFS","BaseFilesystem","dataDir","initialPoolSize","maintainedPoolSize","debug","__privateAdd","pg","opts","__privateMethod","relaxedDurability","sh","__privateGet","size","change","promises","resolve","filename","fh","index","stateAB","path","mode","node","fd","blksize","options","parts","newDirName","currentPath","part","FsError","newDir","_flags","_mode","handleId","buffer","offset","length","position","oldPath","newPath","doFileOps","oldPathParts","oldFilename","oldParent","newPathParts","newFilename","newParent","pathParts","dirName","parent","len","dir","atime","mtime","_atime","data","lastModified","ret","__privateSet","state","stateLines","isNewState","wal","line","entry","methodName","e","walkPromises","walk","child","poolPromises","fn","entryJSON","from","id","__privateWrapper","ah","_a","code","message","ERRNO_CODES"],"mappings":"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","file":"opfs-ahp-FT2DULUN.js","sourcesContent":["import { BaseFilesystem, ERRNO_CODES, type FsStats } from './base.js'\nimport type { PostgresMod } from '../postgresMod.js'\nimport { PGlite } from '../pglite.js'\n\nexport interface OpfsAhpOptions {\n  initialPoolSize?: number\n  maintainedPoolSize?: number\n  debug?: boolean\n}\n\n// TypeScript doesn't have a built-in type for FileSystemSyncAccessHandle\nexport interface FileSystemSyncAccessHandle {\n  close(): void\n  flush(): void\n  getSize(): number\n  read(buffer: ArrayBuffer, options: { at: number }): number\n  truncate(newSize: number): void\n  write(buffer: ArrayBuffer, options: { at: number }): number\n}\n\n// State\n\nconst STATE_FILE = 'state.txt'\nconst DATA_DIR = 'data'\nconst INITIAL_MODE = {\n  DIR: 16384,\n  FILE: 32768,\n}\n\nexport interface State {\n  root: DirectoryNode\n  pool: PoolFilenames\n}\n\nexport type PoolFilenames = Array<string>\n\n// WAL\n\nexport interface WALEntry {\n  opp: string\n  args: any[]\n}\n\n// Node tree\n\nexport type NodeType = 'file' | 'directory'\n\ninterface BaseNode {\n  type: NodeType\n  lastModified: number\n  mode: number\n}\n\nexport interface FileNode extends BaseNode {\n  type: 'file'\n  backingFilename: string\n}\n\nexport interface DirectoryNode extends BaseNode {\n  type: 'directory'\n  children: { [filename: string]: Node }\n}\n\nexport type Node = FileNode | DirectoryNode\n\n/**\n * PGlite OPFS access handle pool filesystem.\n * Opens a pool of sync access handles and then allocates them as needed.\n */\nexport class OpfsAhpFS extends BaseFilesystem {\n  declare readonly dataDir: string\n  readonly initialPoolSize: number\n  readonly maintainedPoolSize: number\n\n  #opfsRootAh!: FileSystemDirectoryHandle\n  #rootAh!: FileSystemDirectoryHandle\n  #dataDirAh!: FileSystemDirectoryHandle\n\n  #stateFH!: FileSystemFileHandle\n  #stateSH!: FileSystemSyncAccessHandle\n\n  #fh: Map<string, FileSystemFileHandle> = new Map()\n  #sh: Map<string, FileSystemSyncAccessHandle> = new Map()\n\n  #handleIdCounter = 0\n  #openHandlePaths: Map<number, string> = new Map()\n  #openHandleIds: Map<string, number> = new Map()\n\n  state!: State\n  lastCheckpoint = 0\n  checkpointInterval = 1000 * 60 // 1 minute\n  poolCounter = 0\n\n  #unsyncedSH = new Set<FileSystemSyncAccessHandle>()\n\n  constructor(\n    dataDir: string,\n    {\n      initialPoolSize = 1000,\n      maintainedPoolSize = 100,\n      debug = false,\n    }: OpfsAhpOptions = {},\n  ) {\n    super(dataDir, { debug })\n    this.initialPoolSize = initialPoolSize\n    this.maintainedPoolSize = maintainedPoolSize\n  }\n\n  async init(pg: PGlite, opts: Partial<PostgresMod>) {\n    await this.#init()\n    return super.init(pg, opts)\n  }\n\n  async syncToFs(relaxedDurability = false) {\n    await this.maybeCheckpointState()\n    await this.maintainPool()\n    if (!relaxedDurability) {\n      this.flush()\n    }\n  }\n\n  async closeFs(): Promise<void> {\n    for (const sh of this.#sh.values()) {\n      sh.close()\n    }\n    this.#stateSH.flush()\n    this.#stateSH.close()\n    this.pg!.Module.FS.quit()\n  }\n\n  async #init() {\n    this.#opfsRootAh = await navigator.storage.getDirectory()\n    this.#rootAh = await this.#resolveOpfsDirectory(this.dataDir!, {\n      create: true,\n    })\n    this.#dataDirAh = await this.#resolveOpfsDirectory(DATA_DIR, {\n      from: this.#rootAh,\n      create: true,\n    })\n\n    this.#stateFH = await this.#rootAh.getFileHandle(STATE_FILE, {\n      create: true,\n    })\n    this.#stateSH = await (this.#stateFH as any).createSyncAccessHandle()\n\n    const stateAB = new ArrayBuffer(this.#stateSH.getSize())\n    this.#stateSH.read(stateAB, { at: 0 })\n    let state: State\n    const stateLines = new TextDecoder().decode(stateAB).split('\\n')\n    // Line 1 is a base state object.\n    // Lines 1+n are WAL entries.\n\n    let isNewState = false\n    try {\n      state = JSON.parse(stateLines[0])\n    } catch (e) {\n      state = {\n        root: {\n          type: 'directory',\n          lastModified: Date.now(),\n          mode: INITIAL_MODE.DIR,\n          children: {},\n        },\n        pool: [],\n      }\n      // write new state to file\n      this.#stateSH.truncate(0)\n      this.#stateSH.write(new TextEncoder().encode(JSON.stringify(state)), {\n        at: 0,\n      })\n      isNewState = true\n    }\n    this.state = state\n\n    // Apply WAL entries\n    const wal = stateLines\n      .slice(1)\n      .filter(Boolean)\n      .map((line) => JSON.parse(line))\n    for (const entry of wal) {\n      const methodName = `_${entry.opp}State`\n      if (typeof this[methodName as keyof this] === 'function') {\n        try {\n          const method = this[methodName as keyof this] as any\n          method.bind(this)(...entry.args)\n        } catch (e) {\n          console.warn('Error applying OPFS AHP WAL entry', entry, e)\n        }\n      }\n    }\n\n    // Open all file handles for dir tree\n    const walkPromises: Promise<void>[] = []\n    const walk = async (node: Node) => {\n      if (node.type === 'file') {\n        try {\n          const fh = await this.#dataDirAh.getFileHandle(node.backingFilename)\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(node.backingFilename, fh)\n\n          this.#sh.set(node.backingFilename, sh)\n        } catch (e) {\n          console.error('Error opening file handle for node', node, e)\n        }\n      } else {\n        for (const child of Object.values(node.children)) {\n          walkPromises.push(walk(child))\n        }\n      }\n    }\n    await walk(this.state.root)\n\n    // Open all pool file handles\n    const poolPromises: Promise<void>[] = []\n    for (const filename of this.state.pool) {\n      poolPromises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          if (this.#fh.has(filename)) {\n            console.warn('File handle already exists for pool file', filename)\n          }\n          const fh = await this.#dataDirAh.getFileHandle(filename)\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(filename, fh)\n          this.#sh.set(filename, sh)\n          resolve()\n        }),\n      )\n    }\n\n    await Promise.all([...walkPromises, ...poolPromises])\n\n    await this.maintainPool(\n      isNewState ? this.initialPoolSize : this.maintainedPoolSize,\n    )\n  }\n\n  async maintainPool(size?: number) {\n    size = size || this.maintainedPoolSize\n    const change = size - this.state.pool.length\n    const promises: Promise<void>[] = []\n    for (let i = 0; i < change; i++) {\n      promises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          ++this.poolCounter\n          const filename = `${(Date.now() - 1704063600).toString(16).padStart(8, '0')}-${this.poolCounter.toString(16).padStart(8, '0')}`\n          const fh = await this.#dataDirAh.getFileHandle(filename, {\n            create: true,\n          })\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(filename, fh)\n          this.#sh.set(filename, sh)\n          this.#logWAL({\n            opp: 'createPoolFile',\n            args: [filename],\n          })\n          this.state.pool.push(filename)\n          resolve()\n        }),\n      )\n    }\n    for (let i = 0; i > change; i--) {\n      promises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          const filename = this.state.pool.pop()!\n          this.#logWAL({\n            opp: 'deletePoolFile',\n            args: [filename],\n          })\n          const fh = this.#fh.get(filename)!\n          const sh = this.#sh.get(filename)\n          sh?.close()\n          await this.#dataDirAh.removeEntry(fh.name)\n          this.#fh.delete(filename)\n          this.#sh.delete(filename)\n          resolve()\n        }),\n      )\n    }\n    await Promise.all(promises)\n  }\n\n  _createPoolFileState(filename: string) {\n    this.state.pool.push(filename)\n  }\n\n  _deletePoolFileState(filename: string) {\n    const index = this.state.pool.indexOf(filename)\n    if (index > -1) {\n      this.state.pool.splice(index, 1)\n    }\n  }\n\n  async maybeCheckpointState() {\n    if (Date.now() - this.lastCheckpoint > this.checkpointInterval) {\n      await this.checkpointState()\n    }\n  }\n\n  async checkpointState() {\n    const stateAB = new TextEncoder().encode(JSON.stringify(this.state))\n    this.#stateSH.truncate(0)\n    this.#stateSH.write(stateAB, { at: 0 })\n    this.#stateSH.flush()\n    this.lastCheckpoint = Date.now()\n  }\n\n  flush() {\n    for (const sh of this.#unsyncedSH) {\n      try {\n        sh.flush()\n      } catch (e) {\n        // The file may have been closed if it was deleted\n      }\n    }\n    this.#unsyncedSH.clear()\n  }\n\n  // Filesystem API:\n\n  chmod(path: string, mode: number): void {\n    this.#tryWithWAL({ opp: 'chmod', args: [path, mode] }, () => {\n      this._chmodState(path, mode)\n    })\n  }\n\n  _chmodState(path: string, mode: number): void {\n    const node = this.#resolvePath(path)\n    node.mode = mode\n  }\n\n  close(fd: number): void {\n    const path = this.#getPathFromFd(fd)\n    this.#openHandlePaths.delete(fd)\n    this.#openHandleIds.delete(path)\n  }\n\n  fstat(fd: number): FsStats {\n    const path = this.#getPathFromFd(fd)\n    return this.lstat(path)\n  }\n\n  lstat(path: string): FsStats {\n    const node = this.#resolvePath(path)\n    const size =\n      node.type === 'file' ? this.#sh.get(node.backingFilename)!.getSize() : 0\n    const blksize = 4096\n    return {\n      dev: 0,\n      ino: 0,\n      mode: node.mode,\n      nlink: 1,\n      uid: 0,\n      gid: 0,\n      rdev: 0,\n      size,\n      blksize,\n      blocks: Math.ceil(size / blksize),\n      atime: node.lastModified,\n      mtime: node.lastModified,\n      ctime: node.lastModified,\n    }\n  }\n\n  mkdir(path: string, options?: { recursive?: boolean; mode?: number }): void {\n    this.#tryWithWAL({ opp: 'mkdir', args: [path, options] }, () => {\n      this._mkdirState(path, options)\n    })\n  }\n\n  _mkdirState(\n    path: string,\n    options?: { recursive?: boolean; mode?: number },\n  ): void {\n    const parts = this.#pathParts(path)\n    const newDirName = parts.pop()!\n    const currentPath: string[] = []\n    let node = this.state.root\n    for (const part of parts) {\n      currentPath.push(path)\n      if (!Object.prototype.hasOwnProperty.call(node.children, part)) {\n        if (options?.recursive) {\n          this.mkdir(currentPath.join('/'))\n        } else {\n          throw new FsError('ENOENT', 'No such file or directory')\n        }\n      }\n      if (node.children[part].type !== 'directory') {\n        throw new FsError('ENOTDIR', 'Not a directory')\n      }\n      node = node.children[part] as DirectoryNode\n    }\n    if (Object.prototype.hasOwnProperty.call(node.children, newDirName)) {\n      throw new FsError('EEXIST', 'File exists')\n    }\n    const newDir: DirectoryNode = {\n      type: 'directory',\n      lastModified: Date.now(),\n      mode: options?.mode || INITIAL_MODE.DIR,\n      children: {},\n    }\n    node.children[newDirName] = newDir\n  }\n\n  open(path: string, _flags?: string, _mode?: number): number {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const handleId = this.#nextHandleId()\n    this.#openHandlePaths.set(handleId, path)\n    this.#openHandleIds.set(path, handleId)\n    return handleId\n  }\n\n  readdir(path: string): string[] {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'directory') {\n      throw new FsError('ENOTDIR', 'Not a directory')\n    }\n    return Object.keys(node.children)\n  }\n\n  read(\n    fd: number,\n    buffer: Uint8Array, // Buffer to read into\n    offset: number, // Offset in buffer to start writing to\n    length: number, // Number of bytes to read\n    position: number, // Position in file to read from\n  ): number {\n    const path = this.#getPathFromFd(fd)\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)!\n    return sh.read(new Uint8Array(buffer.buffer, offset, length), {\n      at: position,\n    })\n  }\n\n  rename(oldPath: string, newPath: string): void {\n    this.#tryWithWAL({ opp: 'rename', args: [oldPath, newPath] }, () => {\n      this._renameState(oldPath, newPath, true)\n    })\n  }\n\n  _renameState(oldPath: string, newPath: string, doFileOps = false): void {\n    const oldPathParts = this.#pathParts(oldPath)\n    const oldFilename = oldPathParts.pop()!\n    const oldParent = this.#resolvePath(oldPathParts.join('/')) as DirectoryNode\n    if (\n      !Object.prototype.hasOwnProperty.call(oldParent.children, oldFilename)\n    ) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const newPathParts = this.#pathParts(newPath)\n    const newFilename = newPathParts.pop()!\n    const newParent = this.#resolvePath(newPathParts.join('/')) as DirectoryNode\n    if (\n      doFileOps &&\n      Object.prototype.hasOwnProperty.call(newParent.children, newFilename)\n    ) {\n      // Overwrite, so return the underlying file to the pool\n      const node = newParent.children[newFilename]! as FileNode\n      const sh = this.#sh.get(node.backingFilename)!\n      sh.truncate(0)\n      this.state.pool.push(node.backingFilename)\n    }\n    newParent.children[newFilename] = oldParent.children[oldFilename]!\n    delete oldParent.children[oldFilename]\n  }\n\n  rmdir(path: string): void {\n    this.#tryWithWAL({ opp: 'rmdir', args: [path] }, () => {\n      this._rmdirState(path)\n    })\n  }\n\n  _rmdirState(path: string): void {\n    const pathParts = this.#pathParts(path)\n    const dirName = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    if (!Object.prototype.hasOwnProperty.call(parent.children, dirName)) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const node = parent.children[dirName]!\n    if (node.type !== 'directory') {\n      throw new FsError('ENOTDIR', 'Not a directory')\n    }\n    if (Object.keys(node.children).length > 0) {\n      throw new FsError('ENOTEMPTY', 'Directory not empty')\n    }\n    delete parent.children[dirName]\n  }\n\n  truncate(path: string, len = 0): void {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)\n    if (!sh) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    sh.truncate(len)\n    this.#unsyncedSH.add(sh)\n  }\n\n  unlink(path: string): void {\n    this.#tryWithWAL({ opp: 'unlink', args: [path] }, () => {\n      this._unlinkState(path, true)\n    })\n  }\n\n  _unlinkState(path: string, doFileOps = false): void {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const dir = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    if (!Object.prototype.hasOwnProperty.call(dir.children, filename)) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const node = dir.children[filename]!\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    delete dir.children[filename]\n    if (doFileOps) {\n      const sh = this.#sh.get(node.backingFilename)!\n      // We don't delete the file, it's truncated and returned to the pool\n      sh?.truncate(0)\n      this.#unsyncedSH.add(sh)\n      if (this.#openHandleIds.has(path)) {\n        this.#openHandlePaths.delete(this.#openHandleIds.get(path)!)\n        this.#openHandleIds.delete(path)\n      }\n    }\n    this.state.pool.push(node.backingFilename)\n  }\n\n  utimes(path: string, atime: number, mtime: number): void {\n    this.#tryWithWAL({ opp: 'utimes', args: [path, atime, mtime] }, () => {\n      this._utimesState(path, atime, mtime)\n    })\n  }\n\n  _utimesState(path: string, _atime: number, mtime: number): void {\n    const node = this.#resolvePath(path)\n    node.lastModified = mtime\n  }\n\n  writeFile(\n    path: string,\n    data: string | Uint8Array,\n    options?: { encoding?: string; mode?: number; flag?: string },\n  ): void {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n\n    if (!Object.prototype.hasOwnProperty.call(parent.children, filename)) {\n      if (this.state.pool.length === 0) {\n        throw new Error('No more file handles available in the pool')\n      }\n      const node: Node = {\n        type: 'file',\n        lastModified: Date.now(),\n        mode: options?.mode || INITIAL_MODE.FILE,\n        backingFilename: this.state.pool.pop()!,\n      }\n      parent.children[filename] = node\n      this.#logWAL({\n        opp: 'createFileNode',\n        args: [path, node],\n      })\n    } else {\n      const node = parent.children[filename] as FileNode\n      node.lastModified = Date.now()\n      this.#logWAL({\n        opp: 'setLastModified',\n        args: [path, node.lastModified],\n      })\n    }\n    const node = parent.children[filename] as FileNode\n    const sh = this.#sh.get(node.backingFilename)!\n    // Files in pool are empty, only write if data is provided\n    if (data.length > 0) {\n      sh.write(\n        typeof data === 'string'\n          ? new TextEncoder().encode(data)\n          : new Uint8Array(data),\n        { at: 0 },\n      )\n      if (path.startsWith('/pg_wal')) {\n        this.#unsyncedSH.add(sh)\n      }\n    }\n  }\n\n  _createFileNodeState(path: string, node: FileNode): FileNode {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    parent.children[filename] = node\n    // remove backingFilename from pool\n    const index = this.state.pool.indexOf(node.backingFilename)\n    if (index > -1) {\n      this.state.pool.splice(index, 1)\n    }\n    return node\n  }\n\n  _setLastModifiedState(path: string, lastModified: number): void {\n    const node = this.#resolvePath(path)\n    node.lastModified = lastModified\n  }\n\n  write(\n    fd: number,\n    buffer: Uint8Array, // Buffer to read from\n    offset: number, // Offset in buffer to start reading from\n    length: number, // Number of bytes to write\n    position: number, // Position in file to write to\n  ): number {\n    const path = this.#getPathFromFd(fd)\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)\n    if (!sh) {\n      throw new FsError('EBADF', 'Bad file descriptor')\n    }\n    const ret = sh.write(new Uint8Array(buffer, offset, length), {\n      at: position,\n    })\n    if (path.startsWith('/pg_wal')) {\n      this.#unsyncedSH.add(sh)\n    }\n    return ret\n  }\n\n  // Internal methods:\n\n  #tryWithWAL(entry: WALEntry, fn: () => void) {\n    const offset = this.#logWAL(entry)\n    try {\n      fn()\n    } catch (e) {\n      // Rollback WAL entry\n      this.#stateSH.truncate(offset)\n      throw e\n    }\n  }\n\n  #logWAL(entry: WALEntry) {\n    const entryJSON = JSON.stringify(entry)\n    const stateAB = new TextEncoder().encode(`\\n${entryJSON}`)\n    const offset = this.#stateSH.getSize()\n    this.#stateSH.write(stateAB, { at: offset })\n    this.#unsyncedSH.add(this.#stateSH)\n    return offset\n  }\n\n  #pathParts(path: string): string[] {\n    return path.split('/').filter(Boolean)\n  }\n\n  #resolvePath(path: string, from?: DirectoryNode): Node {\n    const parts = this.#pathParts(path)\n    let node: Node = from || this.state.root\n    for (const part of parts) {\n      if (node.type !== 'directory') {\n        throw new FsError('ENOTDIR', 'Not a directory')\n      }\n      if (!Object.prototype.hasOwnProperty.call(node.children, part)) {\n        throw new FsError('ENOENT', 'No such file or directory')\n      }\n      node = node.children[part]!\n    }\n    return node\n  }\n\n  #getPathFromFd(fd: number): string {\n    const path = this.#openHandlePaths.get(fd)\n    if (!path) {\n      throw new FsError('EBADF', 'Bad file descriptor')\n    }\n    return path\n  }\n\n  #nextHandleId(): number {\n    const id = ++this.#handleIdCounter\n    while (this.#openHandlePaths.has(id)) {\n      this.#handleIdCounter++\n    }\n    return id\n  }\n\n  async #resolveOpfsDirectory(\n    path: string,\n    options?: {\n      from?: FileSystemDirectoryHandle\n      create?: boolean\n    },\n  ): Promise<FileSystemDirectoryHandle> {\n    const parts = this.#pathParts(path)\n    let ah = options?.from || this.#opfsRootAh\n    for (const part of parts) {\n      ah = await ah.getDirectoryHandle(part, { create: options?.create })\n    }\n    return ah\n  }\n}\n\nclass FsError extends Error {\n  code?: number\n  constructor(code: number | keyof typeof ERRNO_CODES | null, message: string) {\n    super(message)\n    if (typeof code === 'number') {\n      this.code = code\n    } else if (typeof code === 'string') {\n      this.code = ERRNO_CODES[code]\n    }\n  }\n}\n"]}