{"version":3,"sources":["../../../node_modules/.pnpm/@electric-sql+pglite@0.2.17/node_modules/@electric-sql/pglite/src/fs/nodefs.ts"],"names":["init_esm_shims","NodeFS","EmscriptenBuiltinFilesystem","dataDir","o","s","pg","opts","mod","nodefs","PGDATA","__name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,mBAAAA,EAAAA;;AAMaC,IAAAA,CAAAA,IAAN,mBAAqBC,oBAA4B,CAAA;AAGtD,EAAA,WAAA,CAAYC,CAAiB,EAAA;AAC3B,IAAA,KAAA,CAAMA,CAAO,CAAA,EACb,IAAK,CAAA,OAAA,GAAeC,qBAAQD,CAAO,CAAA,EAC3BE,YAAgB,CAAA,UAAA,CAAAD,YAAA,CAAA,IAAA,CAAK,KAAK,OAAO,CAAC,CACrC,IAAAC,YAAA,CAAA,SAAA,CAAU,KAAK,OAAO,CAAA;AAE7B;EAEA,MAAM,IAAA,CAAKC,GAAYC,CAA4B,EAAA;AACjD,IAAA,OAAA,IAAK,CAAA,EAAA,GAAKD,CAYH,EAAA,EAAE,gBAX6B,EACpC,GAAGC,CACH,EAAA,MAAA,EAAQ,CACN,GAAIA,CAAAA,CAAK,MAAU,IAAA,IAClBC,CAAa,CAAA,KAAA;AACZ,MAAMC,IAAAA,CAAAA,GAASD,CAAI,CAAA,EAAA,CAAG,WAAY,CAAA,MAAA;AAClCA,MAAAA,CAAAA,CAAI,EAAG,CAAA,KAAA,CAAME,mBAAM,CAAA,EACnBF,CAAI,CAAA,EAAA,CAAG,KAAMC,CAAAA,CAAAA,EAAQ,EAAE,IAAA,EAAM,IAAK,CAAA,OAAA,IAAWC,mBAAM,CAAA;AACrD,KACF,GAE+B,EAAA;AACnC;AAEA,EAAA,MAAM,OAAyB,GAAA;AAC7B,IAAK,IAAA,CAAA,EAAA,CAAI,MAAO,CAAA,EAAA,CAAG,IAAK,EAAA;AAC1B;AACF,CAAA,EA9BwDC,wBAAjD,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA","file":"nodefs-XQHSNGAA.cjs","sourcesContent":["import * as fs from 'fs'\nimport * as path from 'path'\nimport { EmscriptenBuiltinFilesystem, PGDATA } from './base.js'\nimport type { PostgresMod } from '../postgresMod.js'\nimport { PGlite } from '../pglite.js'\n\nexport class NodeFS extends EmscriptenBuiltinFilesystem {\n  protected rootDir: string\n\n  constructor(dataDir: string) {\n    super(dataDir)\n    this.rootDir = path.resolve(dataDir)\n    if (!fs.existsSync(path.join(this.rootDir))) {\n      fs.mkdirSync(this.rootDir)\n    }\n  }\n\n  async init(pg: PGlite, opts: Partial<PostgresMod>) {\n    this.pg = pg\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: any) => {\n          const nodefs = mod.FS.filesystems.NODEFS\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(nodefs, { root: this.rootDir }, PGDATA)\n        },\n      ],\n    }\n    return { emscriptenOpts: options }\n  }\n\n  async closeFs(): Promise<void> {\n    this.pg!.Module.FS.quit()\n  }\n}\n"]}