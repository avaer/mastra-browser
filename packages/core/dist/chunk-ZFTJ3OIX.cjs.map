{"version":3,"sources":["../src/mastra/index.ts"],"names":["__privateAdd","__privateSet","noopLogger","LogLevel","createLogger","DefaultProxyStorage","Telemetry","__privateGet","__decoratorStart","__decorateElement"],"mappings":"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","file":"chunk-ZFTJ3OIX.cjs","sourcesContent":["import type { Agent } from '../agent';\n// import type { MastraDeployer } from '../deployer';\nimport { LogLevel, createLogger, noopLogger } from '../logger';\nimport type { Logger } from '../logger';\nimport type { MastraMemory } from '../memory/memory';\nimport type { AgentNetwork } from '../network';\nimport type { MastraStorage } from '../storage';\nimport { DefaultProxyStorage } from '../storage/default-proxy-storage';\nimport { InstrumentClass, Telemetry } from '../telemetry';\nimport type { OtelConfig } from '../telemetry';\nimport type { MastraTTS } from '../tts';\nimport type { MastraVector } from '../vector';\nimport type { Workflow } from '../workflows';\n\nexport interface Config<\n  TAgents extends Record<string, Agent<any>> = Record<string, Agent<any>>,\n  TWorkflows extends Record<string, Workflow> = Record<string, Workflow>,\n  TVectors extends Record<string, MastraVector> = Record<string, MastraVector>,\n  TTTS extends Record<string, MastraTTS> = Record<string, MastraTTS>,\n  TLogger extends Logger = Logger,\n  TNetworks extends Record<string, AgentNetwork> = Record<string, AgentNetwork>,\n> {\n  agents?: TAgents;\n  networks?: TNetworks;\n  storage?: MastraStorage;\n  vectors?: TVectors;\n  logger?: TLogger | false;\n  workflows?: TWorkflows;\n  tts?: TTTS;\n  telemetry?: OtelConfig;\n  // deployer?: MastraDeployer;\n\n  /**\n   * Server middleware functions to be applied to API routes\n   * Each middleware can specify a path pattern (defaults to '/api/*')\n   */\n  serverMiddleware?: Array<{\n    handler: (c: any, next: () => Promise<void>) => Promise<Response | void>;\n    path?: string;\n  }>;\n\n  // @deprecated add memory to your Agent directly instead\n  memory?: MastraMemory;\n}\n\n@InstrumentClass({\n  prefix: 'mastra',\n  excludeMethods: ['getLogger', 'getTelemetry'],\n})\nexport class Mastra<\n  TAgents extends Record<string, Agent<any>> = Record<string, Agent<any>>,\n  TWorkflows extends Record<string, Workflow> = Record<string, Workflow>,\n  TVectors extends Record<string, MastraVector> = Record<string, MastraVector>,\n  TTTS extends Record<string, MastraTTS> = Record<string, MastraTTS>,\n  TLogger extends Logger = Logger,\n  TNetworks extends Record<string, AgentNetwork> = Record<string, AgentNetwork>,\n> {\n  #vectors?: TVectors;\n  #agents: TAgents;\n  #logger: TLogger;\n  #workflows: TWorkflows;\n  #tts?: TTTS;\n  // #deployer?: MastraDeployer;\n  #serverMiddleware: Array<{\n    handler: (c: any, next: () => Promise<void>) => Promise<Response | void>;\n    path: string;\n  }> = [];\n  #telemetry?: Telemetry;\n  #storage?: MastraStorage;\n  #memory?: MastraMemory;\n  #networks?: TNetworks;\n\n  /**\n   * @deprecated use getTelemetry() instead\n   */\n  get telemetry() {\n    return this.#telemetry;\n  }\n\n  /**\n   * @deprecated use getStorage() instead\n   */\n  get storage() {\n    return this.#storage;\n  }\n\n  /**\n   * @deprecated use getMemory() instead\n   */\n  get memory() {\n    return this.#memory;\n  }\n\n  constructor(config?: Config<TAgents, TWorkflows, TVectors, TTTS, TLogger>) {\n    // Store server middleware with default path\n    if (config?.serverMiddleware) {\n      this.#serverMiddleware = config.serverMiddleware.map(m => ({\n        handler: m.handler,\n        path: m.path || '/api/*',\n      }));\n    }\n\n    /*\n      Logger\n    */\n\n    let logger: TLogger;\n    if (config?.logger === false) {\n      logger = noopLogger as unknown as TLogger;\n    } else {\n      if (config?.logger) {\n        logger = config.logger;\n      } else {\n        const levleOnEnv = process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.INFO;\n        logger = createLogger({ name: 'Mastra', level: levleOnEnv }) as unknown as TLogger;\n      }\n    }\n    this.#logger = logger;\n\n    let storage = config?.storage;\n    if (!storage) {\n      storage = new DefaultProxyStorage({\n        config: {\n          url: process.env.MASTRA_DEFAULT_STORAGE_URL || `:memory:`,\n        },\n      });\n    }\n\n    /*\n    Telemetry\n    */\n    this.#telemetry = Telemetry.init(config?.telemetry);\n\n    /*\n      Storage\n    */\n    if (this.#telemetry) {\n      this.#storage = this.#telemetry.traceClass(storage, {\n        excludeMethods: ['__setTelemetry', '__getTelemetry'],\n      });\n      this.#storage.__setTelemetry(this.#telemetry);\n    } else {\n      this.#storage = storage;\n    }\n\n    /*\n    Vectors\n    */\n    if (config?.vectors) {\n      let vectors: Record<string, MastraVector> = {};\n      Object.entries(config.vectors).forEach(([key, vector]) => {\n        if (this.#telemetry) {\n          vectors[key] = this.#telemetry.traceClass(vector, {\n            excludeMethods: ['__setTelemetry', '__getTelemetry'],\n          });\n          vectors[key].__setTelemetry(this.#telemetry);\n        } else {\n          vectors[key] = vector;\n        }\n      });\n\n      this.#vectors = vectors as TVectors;\n    }\n\n    if (config?.vectors) {\n      this.#vectors = config.vectors;\n    }\n\n    if (config?.memory) {\n      this.#memory = config.memory;\n      if (this.#telemetry) {\n        this.#memory = this.#telemetry.traceClass(config.memory, {\n          excludeMethods: ['__setTelemetry', '__getTelemetry'],\n        });\n        this.#memory.__setTelemetry(this.#telemetry);\n      }\n    }\n\n    if (config && `memory` in config) {\n      this.#logger.warn(`\n  Memory should be added to Agents, not to Mastra.\n\nInstead of:\n  new Mastra({ memory: new Memory() })\n\ndo:\n  new Agent({ memory: new Memory() })\n\nThis is a warning for now, but will throw an error in the future\n`);\n    }\n\n    if (config?.tts) {\n      this.#tts = config.tts;\n      Object.entries(this.#tts).forEach(([key, ttsCl]) => {\n        if (this.#tts?.[key]) {\n          if (this.#telemetry) {\n            // @ts-ignore\n            this.#tts[key] = this.#telemetry.traceClass(ttsCl, {\n              excludeMethods: ['__setTelemetry', '__getTelemetry'],\n            });\n            this.#tts[key].__setTelemetry(this.#telemetry);\n          }\n        }\n      });\n    }\n\n    /*\n    Agents\n    */\n    const agents: Record<string, Agent> = {};\n    if (config?.agents) {\n      Object.entries(config.agents).forEach(([key, agent]) => {\n        if (agents[key]) {\n          throw new Error(`Agent with name ID:${key} already exists`);\n        }\n        agent.__registerMastra(this);\n\n        agent.__registerPrimitives({\n          logger: this.getLogger(),\n          telemetry: this.#telemetry,\n          storage: this.storage,\n          memory: this.memory,\n          agents: agents,\n          tts: this.#tts,\n          vectors: this.#vectors,\n        });\n\n        agents[key] = agent;\n      });\n    }\n\n    this.#agents = agents as TAgents;\n\n    /*\n    Networks\n    */\n    this.#networks = {} as TNetworks;\n\n    if (config?.networks) {\n      Object.entries(config.networks).forEach(([key, network]) => {\n        network.__registerMastra(this);\n        // @ts-ignore\n        this.#networks[key] = network;\n      });\n    }\n\n    /*\n    Workflows\n    */\n    this.#workflows = {} as TWorkflows;\n\n    if (config?.workflows) {\n      Object.entries(config.workflows).forEach(([key, workflow]) => {\n        workflow.__registerMastra(this);\n        workflow.__registerPrimitives({\n          logger: this.getLogger(),\n          telemetry: this.#telemetry,\n          storage: this.storage,\n          memory: this.memory,\n          agents: agents,\n          tts: this.#tts,\n          vectors: this.#vectors,\n        });\n        // @ts-ignore\n        this.#workflows[key] = workflow;\n      });\n    }\n    this.setLogger({ logger });\n  }\n\n  public getAgent<TAgentName extends keyof TAgents>(name: TAgentName): TAgents[TAgentName] {\n    const agent = this.#agents?.[name];\n    if (!agent) {\n      throw new Error(`Agent with name ${String(name)} not found`);\n    }\n    return this.#agents[name];\n  }\n\n  public getAgents() {\n    return this.#agents;\n  }\n\n  public getVector<TVectorName extends keyof TVectors>(name: TVectorName): TVectors[TVectorName] {\n    const vector = this.#vectors?.[name];\n    if (!vector) {\n      throw new Error(`Vector with name ${String(name)} not found`);\n    }\n    return vector;\n  }\n\n  public getVectors() {\n    return this.#vectors;\n  }\n\n  // public getDeployer() {\n  //   return this.#deployer;\n  // }\n\n  public getWorkflow<TWorkflowId extends keyof TWorkflows>(\n    id: TWorkflowId,\n    { serialized }: { serialized?: boolean } = {},\n  ): TWorkflows[TWorkflowId] {\n    const workflow = this.#workflows?.[id];\n    if (!workflow) {\n      throw new Error(`Workflow with ID ${String(id)} not found`);\n    }\n\n    if (serialized) {\n      return { name: workflow.name } as TWorkflows[TWorkflowId];\n    }\n\n    return workflow;\n  }\n\n  public getWorkflows(props: { serialized?: boolean } = {}): Record<string, Workflow> {\n    if (props.serialized) {\n      return Object.entries(this.#workflows).reduce((acc, [k, v]) => {\n        return {\n          ...acc,\n          [k]: { name: v.name },\n        };\n      }, {});\n    }\n    return this.#workflows;\n  }\n\n  public setStorage(storage: MastraStorage) {\n    this.#storage = storage;\n  }\n\n  public setLogger({ logger }: { logger: TLogger }) {\n    this.#logger = logger;\n\n    if (this.#agents) {\n      Object.keys(this.#agents).forEach(key => {\n        this.#agents?.[key]?.__setLogger(this.#logger);\n      });\n    }\n\n    if (this.#memory) {\n      this.#memory.__setLogger(this.#logger);\n    }\n\n    // if (this.#deployer) {\n    //   this.#deployer.__setLogger(this.#logger);\n    // }\n\n    if (this.#tts) {\n      Object.keys(this.#tts).forEach(key => {\n        this.#tts?.[key]?.__setLogger(this.#logger);\n      });\n    }\n\n    if (this.#storage) {\n      this.#storage.__setLogger(this.#logger);\n    }\n\n    if (this.#vectors) {\n      Object.keys(this.#vectors).forEach(key => {\n        this.#vectors?.[key]?.__setLogger(this.#logger);\n      });\n    }\n  }\n\n  public setTelemetry(telemetry: OtelConfig) {\n    this.#telemetry = Telemetry.init(telemetry);\n\n    if (this.#agents) {\n      Object.keys(this.#agents).forEach(key => {\n        if (this.#telemetry) {\n          this.#agents?.[key]?.__setTelemetry(this.#telemetry);\n        }\n      });\n    }\n\n    if (this.#memory) {\n      this.#memory = this.#telemetry.traceClass(this.#memory, {\n        excludeMethods: ['__setTelemetry', '__getTelemetry'],\n      });\n      this.#memory.__setTelemetry(this.#telemetry);\n    }\n\n    // if (this.#deployer) {\n    //   this.#deployer = this.#telemetry.traceClass(this.#deployer, {\n    //     excludeMethods: ['__setTelemetry', '__getTelemetry'],\n    //   });\n    //   this.#deployer.__setTelemetry(this.#telemetry);\n    // }\n\n    if (this.#tts) {\n      let tts = {} as Record<string, MastraTTS>;\n      Object.entries(this.#tts).forEach(([key, ttsCl]) => {\n        if (this.#telemetry) {\n          tts[key] = this.#telemetry.traceClass(ttsCl, {\n            excludeMethods: ['__setTelemetry', '__getTelemetry'],\n          });\n          tts[key].__setTelemetry(this.#telemetry);\n        }\n      });\n      this.#tts = tts as TTTS;\n    }\n\n    if (this.#storage) {\n      this.#storage = this.#telemetry.traceClass(this.#storage, {\n        excludeMethods: ['__setTelemetry', '__getTelemetry'],\n      });\n      this.#storage.__setTelemetry(this.#telemetry);\n    }\n\n    if (this.#vectors) {\n      let vectors = {} as Record<string, MastraVector>;\n      Object.entries(this.#vectors).forEach(([key, vector]) => {\n        if (this.#telemetry) {\n          vectors[key] = this.#telemetry.traceClass(vector, {\n            excludeMethods: ['__setTelemetry', '__getTelemetry'],\n          });\n          vectors[key].__setTelemetry(this.#telemetry);\n        }\n      });\n      this.#vectors = vectors as TVectors;\n    }\n  }\n\n  public getTTS() {\n    return this.#tts;\n  }\n\n  public getLogger() {\n    return this.#logger;\n  }\n\n  public getTelemetry() {\n    return this.#telemetry;\n  }\n\n  public getMemory() {\n    return this.#memory;\n  }\n\n  public getStorage() {\n    return this.#storage;\n  }\n\n  public getServerMiddleware() {\n    return this.#serverMiddleware;\n  }\n\n  public getNetworks() {\n    return Object.values(this.#networks || {});\n  }\n\n  /**\n   * Get a specific network by ID\n   * @param networkId - The ID of the network to retrieve\n   * @returns The network with the specified ID, or undefined if not found\n   */\n  public getNetwork(networkId: string): AgentNetwork | undefined {\n    const networks = this.getNetworks();\n    return networks.find(network => {\n      const routingAgent = network.getRoutingAgent();\n      return network.formatAgentId(routingAgent.name) === networkId;\n    });\n  }\n\n  public async getLogsByRunId({ runId, transportId }: { runId: string; transportId: string }) {\n    if (!transportId) {\n      throw new Error('Transport ID is required');\n    }\n    return await this.#logger.getLogsByRunId({ runId, transportId });\n  }\n\n  public async getLogs(transportId: string) {\n    if (!transportId) {\n      throw new Error('Transport ID is required');\n    }\n    return await this.#logger.getLogs(transportId);\n  }\n}\n"]}