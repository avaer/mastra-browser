{"version":3,"sources":["../src/agent/index.warning.ts","../src/base.warning.ts","../src/storage/base.warning.ts","../src/integration/integration.warning.ts","../src/integration/openapi-toolset.warning.ts","../src/logger/index.warning.ts","../src/memory/index.warning.ts","../src/tools/index.warning.ts","../src/tts/index.warning.ts","../src/vector/index.warning.ts","../src/workflows/workflow.warning.ts"],"names":["Agent","MastraBase","MastraStorage","Integration","OpenAPIToolset","createLogger","MastraMemory","Tool","MastraTTS","MastraVector","Workflow"],"mappings":"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","file":"index.js","sourcesContent":["import type { Metric } from '../eval';\nimport type { ToolAction } from '../tools';\n\nimport type { AgentConfig } from './types';\nimport { Agent as BaseAgent } from './index';\n\nexport class Agent<\n  TTools extends Record<string, ToolAction<any, any, any>> = Record<string, ToolAction<any, any, any>>,\n  TMetrics extends Record<string, Metric> = Record<string, Metric>,\n> extends BaseAgent<TTools, TMetrics> {\n  constructor(config: AgentConfig<TTools, TMetrics>) {\n    super(config);\n\n    this.logger.warn('Please import \"Agent from \"@mastra/core/agent\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraBase as MastraBaseBase } from './base';\nimport type { RegisteredLogger } from './logger';\n\nexport class MastraBase extends MastraBaseBase {\n  constructor(args: { component?: RegisteredLogger; name?: string }) {\n    super(args);\n\n    this.logger.warn('Please import \"MastraBase\" from \"@mastra/core/base\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraStorage as BaseMastraStorage } from './base';\n\nexport * from './base';\n\nexport abstract class MastraStorage extends BaseMastraStorage {\n  constructor({ name }: { name: string }) {\n    super({\n      name,\n    });\n\n    this.logger.warn('Please import \"MastraStorage\" from \"@mastra/core/storage\" instead of \"@mastra/core\"');\n  }\n}\n","import { Integration as BaseIntegration } from './integration';\n\nexport class Integration<ToolsParams = void, ApiClient = void> extends BaseIntegration<ToolsParams, ApiClient> {\n  constructor() {\n    super();\n\n    console.warn('Please import \"Integration\" from \"@mastra/core/integration\" instead of \"@mastra/core\"');\n  }\n}\n","import { OpenAPIToolset as BaseOpenAPIToolset } from './openapi-toolset';\n\nexport abstract class OpenAPIToolset extends BaseOpenAPIToolset {\n  constructor() {\n    super();\n\n    console.warn('Please import \"OpenAPIToolset\" from \"@mastra/core/integration\" instead of \"@mastra/core\"');\n  }\n}\n","import { createLogger as _createLogger } from './index';\nimport type { LogLevel, TransportMap } from './index';\n\nexport * from './index';\n\n// Factory function for creating loggers\nexport function createLogger(options: { name?: string; level?: LogLevel; transports?: TransportMap }) {\n  console.warn('Please import \"createLogger\" from \"@mastra/core/logger\" instead of \"@mastra/core\"');\n\n  return _createLogger(options);\n}\n","import { MastraMemory as BaseMemory } from './memory';\n\nexport * from './index';\n\nexport abstract class MastraMemory extends BaseMemory {\n  constructor(_arg?: any) {\n    // @ts-ignore\n    super({ name: `Deprecated memory` });\n\n    this.logger.warn('Please import \"MastraMemory\" from \"@mastra/core/memory\" instead of \"@mastra/core\"');\n  }\n}\n","import type { z } from 'zod';\n\nimport { Tool as BaseTool } from './tool';\nimport type { ToolAction, ToolExecutionContext } from './types';\n\nexport * from './tool';\n\nexport class Tool<\n  TSchemaIn extends z.ZodSchema | undefined = undefined,\n  TSchemaOut extends z.ZodSchema | undefined = undefined,\n  TContext extends ToolExecutionContext<TSchemaIn> = ToolExecutionContext<TSchemaIn>,\n> extends BaseTool<TSchemaIn, TSchemaOut, TContext> {\n  constructor(opts: ToolAction<TSchemaIn, TSchemaOut, TContext>) {\n    super(opts);\n\n    console.warn('Please import \"Tool\" from \"@mastra/core/tools\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraTTS as BaseMastraTTS } from './index';\nimport type { TTSConfig } from './index';\n\nexport * from './index';\n\nexport abstract class MastraTTS extends BaseMastraTTS {\n  constructor(args: TTSConfig) {\n    super(args);\n\n    this.logger.warn('Please import \"MastraTTS\" from \"@mastra/core/tts\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraVector as BaseMastraVector } from './vector';\n\nexport * from './index';\n\nexport abstract class MastraVector extends BaseMastraVector {\n  constructor() {\n    super();\n\n    this.logger.warn('Please import \"MastraVector\" from \"@mastra/core/vector\" instead of \"@mastra/core\"');\n  }\n}\n","import type { z } from 'zod';\n\nimport type { Step } from './step';\nimport type { WorkflowOptions } from './types';\nimport { Workflow as BaseWorkflow } from './workflow';\n\nexport * from './index';\n\nexport class Workflow<\n  TSteps extends Step<any, any, any>[] = any,\n  TTriggerSchema extends z.ZodObject<any> = any,\n> extends BaseWorkflow<TSteps, string, TTriggerSchema> {\n  constructor(args: WorkflowOptions<string, TSteps, TTriggerSchema>) {\n    super(args);\n\n    this.logger.warn('Please import \"Workflow\" from \"@mastra/core/workflows\" instead of \"@mastra/core\"');\n  }\n}\n"]}